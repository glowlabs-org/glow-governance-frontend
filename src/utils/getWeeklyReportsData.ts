import { PROXY_URL } from '@/constants/proxy-url'
import {
  EquipmentDetails,
  EquipmentDetailsAndShortId,
  GCAEquipmentResponse,
} from '@/types/GCAEquipmentResponse'
import { GCAServerResponse } from '@/types/GCAServerResponse'
import { farmPubKeyToId } from './farmPubKeyToId'
import { calculateVestingAmountForWeek } from './calculateVestingAmountForWeek'
import { GENESIS_TIMESTAMP } from '@/constants/genesis-timestamp'
import { calculateCredits } from './calculateCredits'
import { RUST_URL } from '@/constants/api-url'

export type ServerDataResponse = {
  device: string
  powerOutput: number
  impactRate: number
  credits: number
  glowWeight: number
  shortId: string
}

// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export interface Farm {
  hexlifiedPublicKey: string
  carbonCreditsProduced: number
  powerOutputs: Array<number>
  impactRates: Array<number>
  weeklyPayment: number
  rollingImpactPoints: number
  powerOutput: number
}

// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export interface GetEquipmentDataHandlerParams {
  url: string
  weekNumber: number
  withFullData: boolean | null
}

export async function getWeeklyReportsData(
  url: string,
  weekNumber: number,
  withFullData: boolean | null
) {
  const fetchUrl =
    RUST_URL +
    '/get_equipment_data' +
    '?url=' +
    url +
    '&weekNumber=' +
    weekNumber +
    '&withFullData=' +
    withFullData

  const res = await fetch(fetchUrl)
  const data = (await res.json()) as Farm[]
  return data
}
